{{ breadcrums (__ 'Home') (__ 'Products')}}

<div class="app-content center-layout mt-2 mx-md-3 px-1">
	<div class="row" style="">

		<div class=" col-lg-12 col-md-12 mb-1 prrr-2 heading-elements p-0 text-right">
			<a class="heading-elements-toggle"><i class="fa fa-ellipsis-v font-medium-3"></i></a>
			<div class="heading-elements ews-heading">
				<ul class="list-inline mb-0">
					<li id="export">
						<select class="select2 form-control export">
							<option value="">{{__ "Export"}}</option>
							<option value="csv">{{__ "XLSX"}}</option>
							<option value="pdf">{{__ "PDF"}}</option>
						</select>
					</li>
				</ul>
			</div>
		</div>
	</div>
	<div class="content-wrapper">
		<div class="row">
			<div class="col-md-12">
				<div class="card">

					<div class="card-content collpase show">

						<!-- Zero configuration table -->
						<section id="configuration">
							<div class="row">
								<div class="col-12">
									<div class="card">

										<div class="card-content collapse show">

											<!--{{log messages}}-->
											{{#if messages.error }}
												<script>
													toastr.error("{{messages.error}}", "{{__ 'Error!'}}", { "showMethod": "fadeIn", "hideMethod": "fadeOut", timeOut: 5000 });
												</script>
											{{/if}}
											{{#if messages.success }}
												<script>
													toastr.success("{{messages.success}}", "{{__ 'Sucess!'}}", { "showMethod": "fadeIn", "hideMethod": "fadeOut", timeOut: 5000 });
												</script>
											{{/if}}
											<div class="card-body card-dashboard card-design">

												<section id="horizontal">
													<div class="row">
														<div class="col-12">
															<div class="card">
																<div class="card-content collapse show"
																	id="NF-datatable">
																	<div class="card-body p-0">
																		<div id="grid"></div>
																		<div id="window"></div>

																	</div>
																</div>

																<div class="card-content collapse show">
																	<div class="card-body card-dashboard">


																		<script type="x/kendo-template"
																			id="page-template">
								 <div class="page-template">
									<div class="header">
									   <div style="float: right"></div>
									  {{{__ "Product List"}}}
									</div>
									<div class="footer">
									 
									</div>
								</div>
							</script>
																		<script type="text/x-kendo-template"
																			id="windowTemplate">


								<div class="swal-modal">
									<span class="swal-icon--warning__body">
										<span class="swal-icon--warning__dot"></span>
									</span>
								</div>
								<div class="swal-title">{{{__ "Delete !"}}}</div>
								<div class="swal-text">{{{__ "Are You sure wan't to delete this product ?"}}}</div>
								<div class="swal-footer">
								<div class="swal-button-container nobutton">
									<button class="swal-button swal-button--confirm btn btn-secondary" id="noButton">{{{__ "NO"}}}</button>
								</div>
								<div class="swal-button-container yesbutton">
									<button class="swal-button swal-button--cancel btn" id="yesButton">{{{__ "YES"}}}</button>
								</div>
								</div>  
							</script>
																		<script>
																			jQuery(document).ready(function () {
																				var windowTemplate = kendo.template($("#windowTemplate").html());//for delete popup
																				$('body').on('change', '.export', function () {
																					var value = $(this).val();
																					if (value == 'csv') {
																						$("#grid").getKendoGrid().saveAsExcel();
																					} else if (value == 'pdf') {
																						$("#grid").getKendoGrid().saveAsPDF();
																					}
																				});


																				var window1 = $("#window").kendoWindow({
																					title: "{{__ 'Alert !'}}",
																					resizable: false,
																					visible: false, //the window will not appear before its .open method is called

																				}).data("kendoWindow");


																				var element = $("#grid").kendoGrid({
																					//var path='{{path}}';

																					pdf: {

																						allPages: true,
																						template: $("#page-template").html(),
																						avoidLinks: true,
																						fileName: "Product-list.pdf",// Bug 277	
																						paperSize: "A4",
																						margin: { top: "2cm", left: "1cm", right: "1cm", bottom: "1cm" },
																						landscape: true,
																						repeatHeaders: true,
																						scale: 0.8,

																					},
																					excel: {
																						fileName: "Product-list.xlsx",// Bug 277
																						allPages: true
																					},
																					scrollable: true,
																					pdfExport: function (e) {

																						var grid = $("#grid").data("kendoGrid");
																						<!-- grid.hideColumn(0); -->
																						grid.hideColumn(15);
																						e.promise
																							.done(function () {
																									grid.showColumn(15);
																							});
																					},

																					dataSource: {
																						serverPaging: false,
																						serverSorting: false,
																						transport: {
																							read: {
																								url: '/ajxfun/product',
																								dataType: "json",
																							},
																							destroy: {
																								url: '/ajxfun/product/delete',
																								dataType: "json",
																								type: 'get',
																								complete: function (e) {
																									$("#grid").data("kendoGrid").dataSource.read();
																									console.log(e.responseText);
																									if (e.responseText == "true") {

																										toastr.success("{{__ "Product Deleted Successfully!"}}", { "showMethod": "fadeIn", "hideMethod": "fadeOut", timeOut: 5000 });

																									} else {

																										toastr.error("{{__ " Error! Product Can Not Be Deleted!"}}", { "showMethod": "fadeIn", "hideMethod": "fadeOut", timeOut: 5000 });

																									}
																								}
																							},

																						},
																						schema: {
																							model: {
																								id: "_id",
																								fields: {
																									_id: { validation: { required: true } },
																									reminder_nm: { validation: { required: true } },
																									reminder_template: { validation: { required: true } },
																									reminder_desc: { validation: { required: true } },
																									reminder_will_send: { validation: { required: true } },
																								}
																							}
																						},
																						pageSize: 10,
																						batch: false,
																						requestEnd: function (e) {
																							if (e.type == "create" && e.response) {
																								enablefilter();
																							}
																						}
																					},

																					sortable: true,
																					reorderable: true,
																					groupable: true,
																					resizable: true,
																					filterable: {
																						mode: "row",
																						messages: {
																							info: "{{__ 'Show items with value that:'}}",
																							isEqualTo: "{{__ 'Is equal to'}}",
																							and: "{{__ 'And'}}",
																							or: "{{__ 'Or'}}",
																							clear: "{{__ 'Clear'}}",
																							filter: "{{__ 'Filter'}}",
																							isTrue: "{{__ 'is true'}}",
																							isFalse: "{{__ 'is false'}}",
																							isEmpty: "{{__ 'is empty'}}",
																							isNotEmpty: "{{__ 'is not empty'}}"
																						},
																						operators: {
																							string: {
																								eq: "{{__ 'is equal to'}}",
																								neq: "{{__ 'is not equal to'}}",
																								startswith: "{{__ 'starts with'}}",
																								contains: "{{__ 'contains'}}",
																								doesnotcontain: "{{__ 'does not contain'}}",
																								endswith: "{{__ 'ends with'}}",
																								isnull: "{{__ 'is null'}}",
																								isnotnull: "{{__ 'is not null'}}"
																							}
																						}
																					},
																					columnMenu: {
																						messages: {
																							columns: "{{__ 'Columns'}}",
																							filter: "{{__ 'Filter'}}",
																							sortAscending: "{{__ 'Sort Ascending'}}",
																							sortDescending: "{{__ 'Sort Descending'}}",
																						},
																					},
																					pageable: {
																						input: true,
																						numeric: false,
																						pageSize: 10,
																						pageSizes: [10, 20, 25, 50, 100],
																						messages: {
																							display: "{{__ '{0} - {1} of {2} items'}}",
																							empty: "{{__ 'No items to display'}}",
																							page: "{{__ 'Page'}}",
																							of: "{{__ 'of {0}'}}",
																							itemsPerPage: "{{__ 'items per page'}}",
																							first: "{{__ 'Go to the first page'}}",
																							previous: "{{__ 'Go to the previous page'}}",
																							next: "{{__ 'Go to the next page'}}",
																							last: "{{__ 'Go to the last page'}}",
																							refresh: "{{__ 'Refresh'}}"
																						}
																					},
																					noRecords: true,
																					messages: {
																						noRecords: "{{__ 'No records available.'}}"
																					},
																					columns: [

																						{
																							field: "productname",
																							title: "{{__ 'Product Name'}}",
																							template: "#= productname && productname.trim() !== '' ? productname : 'N/A' #",
																							width: 150
																						},
																						{
																							field: "categorytypes",
																							title: "{{__ 'Category Type'}}",
																							template: "#= categorytypes && categorytypes.trim() !== '' ? categorytypes : 'N/A' #",
																							width: 150
																						},
																						{
																							field: "productunit",
																							title: "{{__ 'Product Unit'}}",
																							template: "#= productunit && productunit.trim() !== '' ? productunit : 'N/A' #",
																							width: 150
																						},
																						{
																							field: "description",
																							title: "{{__ 'Description'}}",
																							template: "#= description && description.trim() !== '' ? description : 'N/A' #",
																							width: 150
																						},
																						{{!-- {
																							field: "productimage",
																							title: "{{__ 'Product Images'}}",
																							hidden: true,
																							template: function (dataItem) {
																								// Assuming productimage is an array of image names
																								if (dataItem.productimage && dataItem.productimage.length > 0) {
																									// Display the first image (you can customize this based on your needs)
																									return dataItem.productimage[0];
																								} else {
																									return "N/A"; // No images
																								}
																							},
																							width: 150
																						}, --}}
																						{
																							field: "tagname",
																							title: "{{__ 'Tags'}}",
																							hidden: true,
																							template: function (dataItem) {
																								// Assuming tagname is an array of tag names
																								if (dataItem.tagname && dataItem.tagname.length > 0) {
																									// Display all tags (you can customize this based on your needs)
																									return dataItem.tagname.join(", ");
																								} else {
																									return "N/A"; // No tags
																								}
																							},
																							width: 150
																						},
																						{
																							field: "warranty",
																							title: "{{__ 'Warranty'}}",
																							template: "#= warranty #" + " #= dur_type #",
																							width: 180
																						},
																						{
																							field: "skubarcode",
																							title: "{{__ 'SKU/Barcode'}}",
																							hidden: true,
																							width: 120
																						},
																						{
																							field: "initialstock",
																							title: "{{__ 'Initial Stock'}}",
																							template: "#= initialstock && initialstock.trim() !== '' ? initialstock : 'N/A' #",
																							width: 150
																						},
																						{
																							field: "stockexpiry",
																							title: "{{__ 'Stock Expiry'}}",
																							template: "#= stockexpiry && stockexpiry.trim() !== '' ? stockexpiry : 'N/A' #",
																							hidden: true,
																							width: 150
																						},
																						{
																							field: "locationrack",
																							title: "{{__ 'Location/Rack Number'}}",
																							template: "#= locationrack && locationrack.trim() !== '' ? locationrack : 'N/A' #",
																							hidden: true,
																							width: 150,
																							template: function (dataItem) { return dataItem.locationrack ? dataItem.locationrack : "N/A"; }
																						},
																						{
																							field: "retailprice",
																							title: "{{{currencyList session.generaldata.currency}}} " + "{{__ 'Retail Price'}}",
																							hidden: true,

																							width: 150
																						},
																						{
																							field: "specialprice",
																							title: "{{{currencyList session.generaldata.currency}}} " + "{{__ 'Special Price'}}",
																							hidden: true,
																							width: 150
																						},
																						{
																							field: "supplyprice",
																							title: "{{{currencyList session.generaldata.currency}}} " + "{{__ 'Supply Price'}}",
																							hidden: true,
																							width: 150
																						},
																						{
																							field: "commission",
																							title: "{{{currencyList session.generaldata.currency}}} " + "{{__ 'Commission'}}",
																							hidden: true,
																							width: 150
																						},
																						{
																							width: "200px",
																							command:
																								[
																									{
																										template: "<center>"
																									},

																									/* { 
																									  name: "pageview", text:"", className: "btn btn-icon btn-outline-light",iconClass:"ft-eye",
																									  click:function(e) 
																									  {
																										var clickedRow = this.dataItem($(e.currentTarget).closest("tr"));
																									   
																										var id = clickedRow._id;
																										window.location.href = "addrole/"+id;
																										return false;
																									  } 
																								  },   */
																									{ template: "&nbsp;" },
																									{{!-- console.log({{ accessrightdata.update }}),
																					console.log({{ accessrightdata.delete }
																			}),
																				console.log({{ accessrightdata.add }}), --}}

																			{{#ifCond accessrightdata.view "||" session.admin_access}}
																			{
																				name: "pageview", text: "", className: "btn btn-icon btn-outline-light", iconClass: "ft-eye",
																					click: function(e) {
																						var clickedRow = this.dataItem($(e.currentTarget).closest("tr"));

																						var id = clickedRow._id;
																						window.location.href = "viewproduct/" + id;
																						return false;
																					}
																			},
																			{{/ifCond}}
																			{ template: "&nbsp;" },

																			/* Edit action start */
																			{{#ifCond accessrightdata.update "||" session.admin_access}}
																			{
																				name: "pageEdit", text: "", className: "btn btn-icon btn-outline-light", iconClass: "fa fa-pencil",
																					click: function(e) {
																						var clickedRow = this.dataItem($(e.currentTarget).closest("tr"));

																						var id = clickedRow._id;
																						window.location.href = "addproduct/" + id;
																						return false;
																					}
																			},
																			{{/ifCond}}
																			{ template: "&nbsp;" },
																			{{#ifCond accessrightdata.delete "||" session.admin_access}}
																			{
																				name: "Delete", text: "", className: "btn btn-icon color-red delete_role btn-outline-light", iconClass: "fa fa-trash",
																					click: function(e) {
																						e.preventDefault();
																						var tr = $(e.target).closest("tr");
																						var data = this.dataItem(tr);
																						if (confirm(`{{__ "Are You sure wan't to delete this product ?"}}`)) {
																							var grid = $("#grid").data("kendoGrid");
																							grid.dataSource.remove(data)
																							grid.dataSource.sync();
																						}
																					}
																			},
																			{{/ifCond}}

																			/* Delete action end */

																			{ template: "</center>" },
							 
							],
																			{{#ifCond accessrightdata.add "||" session.admin_access}}

																			title: "{{__ "Action"}}",
																				headerTemplate: "<center><a href='addproduct'><button type='button' class='btn addnew btn-sm'><i class='fa fa-plus'></i> {{__ "New"}}</button></a></center>"
																			{{/ifCond}}
					}
                ],
																			editable: {
																				mode: "inline"
																			}
            }); 
        });
																		</script>
																	</div>
																</div>
															</div>
														</div>
													</div>
												</section>
											</div>
										</div>
									</div>
								</div>
							</div>
						</section>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>